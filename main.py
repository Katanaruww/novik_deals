#code by: phantom_off
import sqlite3
from aiogram import Dispatcher, Bot
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import time
import sys
import subprocess
storage = MemoryStorage()


class FSM(StatesGroup):
	token = State()
	rekv = State()

bot = Bot("5963298629:AAFj_5KaqmF8FYVqcmmo-Btkpn4hoC__L34")
dp = Dispatcher(bot, storage=storage)
admins = [6035428327, 6207847020]
supp = "[–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: Phantom]"
conn = sqlite3.connect('database.db', check_same_thread=False)
cursor = conn.cursor()


ma = InlineKeyboardMarkup()
ma.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="on_check"))
ma.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="add_token"))
ma.add(InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç", callback_data="see_cards"))
ma.add(InlineKeyboardButton("–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è", callback_data="change"))
ma.add(InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="help"))

@dp.message_handler(commands=["start"], state=None)
async def start(message):
	if message.chat.id in admins:
		await bot.send_message(message.chat.id, "<b>–ü—Ä–∏–≤–µ—Ç!</b>",
							   parse_mode="HTML", reply_markup=ma)
@dp.callback_query_handler(lambda call: call.data == "del_card", state="*")
async def delete(call, state: FSMContext):
	
	current_state = await state.get_data()
	if current_state is None:
		return
	await state.finish()
	x = conn.execute("SELECT id_cards FROM cards ORDER BY id DESC LIMIT 1").fetchone()
	cursor.execute("DELETE FROM cards WHERE id_cards = ?", (x[0],))
	conn.commit()
	await call.message.edit_text("<b>üö´–û–¢–ú–ï–ù–ï–ù–ûüö´\n\n</b>", parse_mode="HTML", reply_markup=ma)
@dp.callback_query_handler(lambda call: call.data and call.data.startswith("smotr_"))
async def delete(call):

	x = call.data.replace("smotr_", "")
	row = cursor.execute("SELECT * FROM cards WHERE id_cards = ?", (x,)).fetchone()
	mar = InlineKeyboardMarkup()
	mar.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—åüö´", callback_data=f"delete_{row[3]}"))
	mar.add(InlineKeyboardButton("–ù–∞–∑–∞–¥üëà", callback_data="see_cards"))

	await call.message.edit_text(f"<b>–¢–∏–ø –æ–ø–ª–∞—Ç—ã: {row[1]}</b>\n"
								 f"<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã: {row[2]}</b>", parse_mode="HTML", reply_markup=mar)

@dp.callback_query_handler(lambda call: call.data and call.data.startswith("delete_"))
async def delete(call):
	x = call.data.replace("delete_", "")
	cursor.execute("DELETE  FROM cards WHERE id_cards = ?", (x,))
	conn.commit()
	mar = InlineKeyboardMarkup()
	mar.add(InlineKeyboardButton("–ù–∞–∑–∞–¥üëà", callback_data="see_cards"))
	await call.message.edit_text(f"<b>–£—Å–ø–µ—à–Ω–æ!</b>", parse_mode="HTML", reply_markup=mar)
@dp.callback_query_handler(lambda call: True)
async def ca(call):
	if call.data == "on_check":
		card = InlineKeyboardMarkup()
		card.add(InlineKeyboardButton("–°–±–µ—Ä–±–∞–Ω–∫", callback_data="add_sber"))
		card.add(InlineKeyboardButton("Qiwi", callback_data="add_qiwi"))
		card.add(InlineKeyboardButton("–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É", callback_data="add_perev_card"))
		card.add(InlineKeyboardButton("–ú–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å", callback_data="add_mobile"))
		card.add(InlineKeyboardButton("–¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data="add_tink"))
		card.add(InlineKeyboardButton("–°–ë–ü", callback_data="add_sbp"))
		card.add(InlineKeyboardButton("Qiwi-—Å—á—ë—Ç", callback_data="add_qiwi_shet"))
		card.add(InlineKeyboardButton("–ù–∞–∑–∞–¥üëà", callback_data="menu_inline"))
		await call.message.edit_text("<b>–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:</b>", parse_mode="HTML", reply_markup=card)
	elif call.data == "change":
		change = InlineKeyboardMarkup()
		change.add(InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å‚úÖ", callback_data="on_proc"))
		change.add(InlineKeyboardButton("–ù–∞–∑–∞–¥üëà", callback_data="menu_inline"))
		await call.message.edit_text("–í—ã–±—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=change)
	elif call.data == "on_proc":
		pit = InlineKeyboardMarkup().add(InlineKeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—åüö´", callback_data="off_proc"))
		await call.message.edit_text("–£—Å–ø–µ—à–Ω–æ!‚úÖ", reply_markup=pit)
		subprocess.Popen(['python', 'proc.py'])
	elif call.data == "off_proc":
		subprocess.Popen(['python', 'proc.py']).terminate()
		await call.message.edit_text("–£—Å–ø–µ—à–Ω–æ‚úÖ", reply_markup=ma)
	elif call.data == "add_sber":
		name = "–°–±–µ—Ä–±–∞–Ω–∫"
		id_bank = call.id
		cursor.execute("INSERT INTO cards (payment_type, id_cards) VALUES (?, ?)", (name, id_bank,))
		conn.commit()
		delete = InlineKeyboardMarkup().add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞üëà", callback_data="del_card"))
		await call.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –∫–æ–Ω–µ—á–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É:\n\n" , parse_mode="HTML", reply_markup=delete)
		await FSM.rekv.set()
	elif call.data == "add_qiwi":
		name = "Qiwi"
		id_bank = call.id
		cursor.execute("INSERT INTO cards (payment_type, id_cards) VALUES (?, ?)", (name, id_bank,))
		conn.commit()
		delete = InlineKeyboardMarkup().add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞üëà", callback_data="del_card"))
		await call.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –∫–æ–Ω–µ—á–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É:\n\n", parse_mode="HTML", reply_markup=delete)
		await FSM.rekv.set()
	elif call.data == "add_perev_card":
		name = "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É"
		id_bank = call.id
		cursor.execute("INSERT INTO cards (payment_type, id_cards) VALUES (?, ?)", (name, id_bank,))
		conn.commit()
		delete = InlineKeyboardMarkup().add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞üëà", callback_data="del_card"))
		await call.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –∫–æ–Ω–µ—á–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É:\n\n", parse_mode="HTML", reply_markup=delete)
		await FSM.rekv.set()
	elif call.data == "add_mobile":
		name = "–ú–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å"
		id_bank = call.id
		cursor.execute("INSERT INTO cards (payment_type, id_cards) VALUES (?, ?)", (name, id_bank,))
		conn.commit()
		delete = InlineKeyboardMarkup().add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞üëà", callback_data="del_card"))
		await call.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –∫–æ–Ω–µ—á–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É:\n\n", parse_mode="HTML", reply_markup=delete)
		await FSM.rekv.set()
	elif call.data == "add_tink":
		name = "–¢–∏–Ω—å–∫–æ—Ñ—Ñ"
		id_bank = call.id
		cursor.execute("INSERT INTO cards (payment_type, id_cards) VALUES (?, ?)", (name, id_bank,))
		conn.commit()
		delete = InlineKeyboardMarkup().add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞üëà", callback_data="del_card"))
		await call.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –∫–æ–Ω–µ—á–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É:\n\n", parse_mode="HTML", reply_markup=delete)
		await FSM.rekv.set()
	elif call.data == "add_sbp":
		name = "–°–ë–ü"
		id_bank = call.id
		cursor.execute("INSERT INTO cards (payment_type, id_cards) VALUES (?, ?)", (name, id_bank,))
		conn.commit()
		delete = InlineKeyboardMarkup().add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞üëà", callback_data="del_card"))
		await call.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –∫–æ–Ω–µ—á–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É:\n\n", parse_mode="HTML", reply_markup=delete)
		await FSM.rekv.set()
	elif call.data == "add_qiwi_shet":
		name = "Qiwi-—Å—á—ë—Ç"
		id_bank = call.id
		cursor.execute("INSERT INTO cards (payment_type, id_cards) VALUES (?, ?)", (name, id_bank,))
		conn.commit()
		delete = InlineKeyboardMarkup().add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞üëà", callback_data="del_card"))
		await call.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –∫–æ–Ω–µ—á–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É:\n\n", parse_mode="HTML", reply_markup=delete)
		await FSM.rekv.set()
	elif call.data == "add_token":
		await call.message.edit_text("<b>–ü—Ä–∏–≤–µ—Ç! \n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω —Å–∞–π—Ç–∞: </b>",
							   parse_mode="HTML")
		await FSM.token.set()
	elif call.data == "see_cards":
		card = InlineKeyboardMarkup()
		card.add(InlineKeyboardButton("–°–±–µ—Ä–±–∞–Ω–∫", callback_data="see_sber"))
		card.add(InlineKeyboardButton("Qiwi", callback_data="see_qiwi"))
		card.add(InlineKeyboardButton("–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É", callback_data="see_perev_card"))
		card.add(InlineKeyboardButton("–ú–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å", callback_data="see_mobile"))
		card.add(InlineKeyboardButton("–¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data="see_tink"))
		card.add(InlineKeyboardButton("–°–ë–ü", callback_data="see_sbp"))
		card.add(InlineKeyboardButton("Qiwi-—Å—á—ë—Ç", callback_data="see_qiwi_shet"))
		card.add(InlineKeyboardButton("–ù–∞–∑–∞–¥üëà", callback_data="menu_inline"))
		await call.message.edit_text("<b>–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:</b>", parse_mode="HTML", reply_markup=card)
	elif call.data == "menu_inline":
		await call.message.edit_text("<b>–ü—Ä–∏–≤–µ—Ç! \n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω —Å–∞–π—Ç–∞: </b>",
							   parse_mode="HTML", reply_markup=ma)
	elif call.data == "see_sber":
		await see_cards(call, "–°–±–µ—Ä–±–∞–Ω–∫")
	elif call.data == "see_qiwi":
		await see_cards(call, "Qiwi")
	elif call.data == "see_perev_card":
		await see_cards(call, "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É")
	elif call.data == "see_mobile":
		await see_cards(call, "–ú–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å")
	elif call.data == "see_tink":
		await see_cards(call, "–¢–∏–Ω—å–∫–æ—Ñ—Ñ")
	elif call.data == "see_sbp":
		await see_cards(call, "–°–ë–ü")
	elif call.data == "see_qiwi_shet":
		await see_cards(call, "Qiwi-—Å—á—ë—Ç")

@dp.message_handler(state=FSM.rekv)
async def num(message, state: FSMContext):
	rekv = message.text
	await state.update_data(rekv=rekv)
	data = await state.get_data()
	rekv_get = data.get('rekv')
	msg = message.chat.id
	row = cursor.execute("SELECT id FROM cards ORDER BY id DESC LIMIT 1").fetchone()
	cursor.execute("UPDATE cards SET card = ? WHERE id = ?",
				   (rekv_get,  row[0],))
	conn.commit()
	mar = InlineKeyboardMarkup()
	mar.add(InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="on_check"))
	await bot.send_message(msg, "–£—Å–ø–µ—à–Ω–æ‚úÖ", reply_markup=mar)
	await state.finish()
@dp.message_handler(state=FSM.token)
async def token(message, state: FSMContext):
	token = message.text
	await state.update_data(token=token)
	data = await state.get_data()
	token_get = data.get("token")
	conn.execute("INSERT INTO setting (token) VALUES (?)", (token_get, ))
	conn.commit()
	await bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! \n–ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ! \n–ß—Ç–æ–±—ã –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–ª –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É'", reply_markup=ma)
	await state.finish()
async def see_cards(call, name_bank):
	row = cursor.execute("SELECT * FROM cards WHERE payment_type = ?", (name_bank,)).fetchall()
	markup = InlineKeyboardMarkup()
	for i in range(len(row)):
		markup.add(InlineKeyboardButton(f"{row[i][2]}", callback_data=f"smotr_{row[i][3]}"))
	markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="menu_inline"))
	await call.message.edit_text("<b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ä—Ç</b>", parse_mode="HTML", reply_markup=markup)
if __name__ == '__main__':
	try:
		executor.start_polling(dp)
	except Exception as e:
		time.sleep(5)
		print(e)



